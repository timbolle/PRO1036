---
title: "Lab 01 - Hello World"
author: "Tim Boll√©"
editor: visual
---

# Getting started

## Github

Nous allons commencer par r√©cup√©rer le fichier Rmd dans lequel vous allez enregistrer vos r√©ponses. Pour cela, deux possibilit√©s, selon que git soit install√© sur votre machine ou non

#### Git est correctement install√©
Dans RStudio:

  - Fichier > Nouveau Projet
  - Version Control > Git
  - Dans _Repository URL_ : indiquez l'adresse: <https://github.com/PRO1036/lab01.git>
  - Choisissez un nom pour le dossier qui sera cr√©√©, par exemple "Lab01"
  - Choisissez o√π vous voulez cr√©er le projet dans votre ordinateur.

Cela va copier les fichiers pr√©sents sur GitHub, et les copier dans le dossier sp√©cifi√©. Vous pouvez passer √† [l'√©tape suivante](#suite)


#### Git n'est pas install√©
Dans Rstudio:

  - Fichier > Nouveau Projet
  - New Directory > New Project
  - Choisissez un nom pour le dossier qui sera cr√©√©, par exemple "Lab01"
  - Choisissez o√π vous voulez cr√©er le projet dans votre ordinateur.

Nous avons cr√©er un projet vide. Il faut maintenant aller chercher les fichiers su GitHub.
Sur GitHub:

  - Visitez l'adresse: <https://github.com/PRO1036/lab01>
  - Cliquez sur le bouton vert: ![](figs/github-bouton.png){.inline-image}
  - Cliquez ensuite sur *Download ZIP*
  - Ouvrez le fichier ZIP et copiez le contenu du dossier ZIP (fichier .Rmd) dans le dossier de votre projet R

‚ö†Ô∏è Dans le fichier zip, vous devriez avoir un dossier (nomm√© `lab01-master`). Ne copiez pas ce dossier dans votre projet RStudio mais plut√¥t son contenu.

#### Dans les deux cas {#suite}
Dans RStudio, vous devriez voir le fichier .Rmd list√© en bas √† droite dans la liste de fichier:

![](figs/rstudio-files.png)

Si vous cliquez maintenant sur le fichier .rmd, il va apparaitre dans la zone en haut √† gauche. Vous pourrez l'√©diter et le "Render/Knit" pour voir le r√©sultat final.

Veuillez noter que ce que vous √©criver dans le fichier Rmd et ce que vous √©crivez dans la console ne communiquent pas (il s'agit de deux environnements diff√©rents). Si vous voulez utiliser la console (zone en bas √† gauche), il faut retaper les commandes.




## Installation des packages

Nous allons travailler avec deux packages: **datasauRus** qui contient le jeu de donn√©es que nous allons utiliser et **tidyverse** qui est une collection de packages pour l'analyse de donn√©es (nous allons beaucoup en parler). Normalement, RStudio devrait vous proposer de les installer automatiquement, comme montr√© sur l'image ci-dessous:

```{r clone-repo-link, fig.margin = TRUE, echo = FALSE, fig.width=3}
knitr::include_graphics("figs/install_packages.png")
```

Pour charger les packages dans l'espace de travail, nous devons l'indiquer:

```{r message=FALSE}
library(tidyverse) 
library(datasauRus)
```

Ces deux lignes se retrouvent √©galement dans votre fichier Rmarkdown. Si vous voulez utiliser la console, il faudra √©galement les taper.

## Donn√©es

Nous allons travailler avec le jeu de donn√©es appel√© `datasaurus_dozen`, faisant partie du package `datasaurus`. Ce jeu de donn√©es contient en r√©alit√© 13[^1] jeux de donn√©es, dont le but est de nous montrer l'importance de la visualisation de donn√©es, et pourquoi elle doit accompagner les statistiques descriptives.

[^1]: Si vous vous demandez pourquoi il y a 13 jeux de donn√©es dans cette "douzaine de datasaurus": [Baker's dozen](https://en.wikipedia.org/wiki/Dozen#Baker's_dozen)

Pour en savoir plus sur le jeu de donn√©es, vous pouvez taper `?datasaurus` dans la console. En ajoutant un `?` devant le nom d'un objet vous affichera l'aide associ√©e √† cet objet.

# Exercises

## Exercice 1

En utilisant l'aide, combien de lignes et de colonnes poss√®de le `datasaurus_dozen` ? Quelles sont les variables pr√©sentes dans le tableau ? Vous pouvez ajouter vos r√©ponse dans votre fichier .Rmd.

La colonne `dataset` permet d'indiquer le jeu de donn√©es. Nous pouvons compter le nombre d'√©l√©ments pour chaque jeu de donn√©es:

```{r}
datasaurus_dozen %>%
  count(dataset)
```

Le dataset Datasaurus original (`dino`) a √©t√© cr√©√© par Aberto Cairo. Les autres datasets ont √©t√© g√©n√©r√©s par Matejka et Fitzmaurice @matejkaSameStatsDifferent2017. Dans cet article, ils pr√©sentent des donn√©es tr√®s diff√©rentes qui ont les m√™mes descriptions statistiques.

üß∂ ‚úÖ ‚¨ÜÔ∏è *Knit, commit, and push ! Envoyez vos r√©sutlats sur Github en indiquant un message du type "Ajout des r√©ponses √† l'exercice 1".*

## Exercice 2

Repr√©sentez `y` en fonction de `x` pour le `dino` dataset. Calculez ensuite le coefficient de correlation. Vous ne comprenez pas tout ? Pas grave !

Ci-dessous se trouve le code dont vous aurez besoin pour compl√©ter l'exercice. Prenez seulement ce dont vous avez besoin, knittez et observez le r√©sultat !

Nous allons commencer par prendre le `datasaurus_dozen` et le *piper* dans la fonction `filter` pour filtrer selon `dataset == "dino"`. Le r√©sutlat est stock√© dans un nouveau tableau appel√© `dino_data`.

```{r}
dino_data <- datasaurus_dozen %>%
  filter(dataset == "dino")
```

D√©composons un peu tout cela !

Pour commencer, l'op√©rateur *pipe*: `%>%`, prend ce qui vient avant (√† gauche) et l'envoie comme premier argument de ce qui vient apr√®s (√† droite ou en dessous). Concr√®tement, nous pouvons lire `filter` le `datasaurus_dozen` pour ne garder seulement les lignes o√π `dataset == "dino"`.

Ensuite, l'op√©rateur d'assignation `<-` permet de d√©finir le nom `dino_data` et d'y stocker le r√©sultat de l'op√©ration de filtration.

Nous devons ensuite visualiser les donn√©es. Pour cela nous allons utiliser la fonction `ggplot`. Le premi√®re chose √† indiquer sont les donn√©es √† visualiser. Ensuite nous allons d√©finir un l'`aes`th√©tisme du graphique. Par exemple, nous allons envoyer la variable `x` du tableau sur l'axe x du graphe, et la variable `y` du tableau sur l'axe x. Nous allons ensuite d√©finir la `geom`√©trie du graphe. Dans ce cas, nous voulons que chaque point soit repr√©sent√© par un point, d'o√π le `geom_point`.

```{r fig.fullwidth=TRUE}
ggplot(data = dino_data, mapping = aes(x = x, y = y)) +
  geom_point()
```

Ne vous inqui√©tez pas si cela parait encore compliqu√©, nous verrons tout cela plus en d√©tail plus tard.

Pour la deuxi√®me partie de l'exercice, nous voulons calculer quelques statistiques sur notre jeu de donn√©es. Le co√©fficient de corr√©lation, souvent appel√© $r$ en statistique, mesure la relation lin√©aire entre deux variables. Vous verrez que certaines paires de variables n'ont pas de relation lin√©aire. C'est pour cela qu'il est important de les visualiser. Il n'est pas toujours n√©cessaire de calculer le $r$ dans ces cas l√†. Dans notre cas, la relation n'est clairement pas lin√©aire, mais plut√¥t *dinosaire*.

Faisons le quand m√™me pour le plaisir !

But, for illustrative purposes, let's calculate the correlation coefficient between `x` and `y`.

```{r}
dino_data %>%
  summarize(r = cor(x, y))
```

üß∂ ‚úÖ ‚¨ÜÔ∏è *Knit, commit, and push ! Vous pouvez mettre un message indiquant que vous avez ajout√© les r√©ponses √† l'exercice 2.*

## Exercice 3

Repr√©sentez `y` en fonction de `x` pour le `star` dataset. Pour cela, r√©utilisez le code de l'exercice pr√©c√©dent ! Calculez √©galement le coefficient de corr√©lation. Comparez avec celle obtenu pour le `dino` dataset.

üß∂ ‚úÖ ‚¨ÜÔ∏è *Knit, commit, and push !*

## Exercice 4

Repr√©sentez `y` en fonction de `x` pour le `circle` dataset. Pour cela, r√©utilisez le code de l'exercice pr√©c√©dent ! Calculez √©galement le coefficient de corr√©lation. Comparez avec celle obtenu pour les `dino` et `star` dataset.

üß∂ ‚úÖ ‚¨ÜÔ∏è *Knit, commit, and push !*

## Exercice 5

Nous allons maintenant repr√©senter tous les jeux de donn√©es d'un coup ! Pour cela, nous allons utilis√© quelque chose appel√© le *faceting*

```{r all-viz, eval=FALSE, fig.fullwidth=TRUE}
ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+
  geom_point()+
  facet_wrap(~ dataset, ncol = 3) +
  theme(legend.position = "none")
```

Nous pouvons √©galement utiliser la fonction `group_by`pour calculer des statistiques directement sur chaque jeu de donn√©es.

```{r all-r, eval=FALSE}
datasaurus_dozen %>%
  group_by(dataset) %>%
  summarize(r = cor(x, y)) %>%
  print(13)
```

Nous en avons fini avec notre premi√®re analyse de donn√©es !

üß∂ ‚úÖ ‚¨ÜÔ∏è *Bien jou√©! knit, commit and push ! Vous pouvez dire que vous avez terminer le lab 01 dans votre message ! Vous pouvez allez voir sur Github si tout est en ordre.*
